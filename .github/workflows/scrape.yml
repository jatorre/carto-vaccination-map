name: Scrape latest data

on:
  push:
  workflow_dispatch:
  schedule:
    - cron:  '0 */2 * * *'

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out this repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Fetch latest data
      run: |-
        curl https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_data | jq . > states.json
        curl https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_county_condensed_data | jq -c '.vaccination_county_condensed_data[]' > counties.json
    - id: commitChange
      name: Commit and push if it changed
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git pull 
        git add -A
        timestamp=$(date -u)
        git commit -m "Latest data: ${timestamp}" || exit 1
        git push
    - name: Set up gcloud Cloud SDK environment
      if: steps.commitChange.conclusion == 'success'
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    - name: Remove existing table in BigQuery
      if: steps.commitChange.conclusion == 'success'
      run: bq rm -f -t maps.cdc_raw_counties_data
    - name: Upload new table to BigQuery
      if: steps.commitChange.conclusion == 'success'
      run: bq load --autodetect --source_format=NEWLINE_DELIMITED_JSON maps.cdc_raw_counties_data counties.json
    - name: Set description info on Bigquery
      if: steps.commitChange.conclusion == 'success'
      run: bq update --description "Latest data ${timestamp} | From https://covid.cdc.gov/covid-data-tracker/COVIDData/getAjaxData?id=vaccination_county_condensed_data" maps.cdc_raw_counties_data
    - name: Execute the update of the points table
      #if: steps.commitChange.conclusion == 'success'
      run: bq query --use_legacy_sql=false < raw_points_query.sql
    #- name: Execute the tiler for the visualization points
    #  if: steps.commitChange.conclusion == 'success'
    #  run: bq query --use_legacy_sql=false < visualization_points_tileset_query.sql